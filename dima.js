// 1 ПЕРЕМЕННЫЕ 

let name = 'Dimitri' // переменная типа String. У JS нет строгой типизации.
// Если создана переменная "вар", то впоследствии я могу менять значение
//этой переменной. var - устарел.

//Массивы
let carsOwned = ["Мазда", "Мерседес", "БМВ", "Субару", "Форд"] //Массив
console.log('Глава 1: Массивы. Список машин ')
console.log(carsOwned)
console.log('Или вот по определённому индексу [3] будет ' + carsOwned[3])
console.log('А вот длина массива равна: ' + carsOwned.length) //Джава скрипт косячит, ибо мы следующими строками добавляем значения.
carsOwned[0] = 'Порше'
carsOwned[5] = 'Инфинити'
carsOwned[carsOwned.length] = "Запорожец" //Новый элемент в конце
carsOwned[carsOwned.length] = "Лада" //Новый элемент в конце

let currentYear = 2021 // переменная типа Int. У JS нет строгой типизации.
//То же самое с "лет". Повторение вара.
let birthYear = 1993
let age = currentYear - birthYear
age = currentYear - birthYear + 1

const lastName = 'Samasiuk'
//Константа неизменна. Read only переменная.

const dimaIsTester = true; // переменная типа Boolean. У JS нет строгой типизации.


const dimaIsDeveloper = false; // переменная типа Boolean. У JS нет строгой типизации.

personAge = 'Двадцать восемь' // типы переменных менять можно на лету изменением содержимого. Я сейчас изменил цифру на текст, а могу ещё и на true. Браузер сам подхватит.



//=======================================================================================================================



// 2 СТИЛЬ НАПИСАНИЯ

let camelStyle = 'стильВерблюда - такой стиль написания названия для переменных. Никаких нижних подчеркиваний.'
let _ = 'но если очень хочется нижнего подчеркивания, то использовать можно. И знак $ тоже можно.'
let commaAndPoint = 'Точка с запятой в отличие от Джавы тут не нужна никогда. Хотя позволительно, если очень хочется.'
const withNum5 = 'В названии переменной допустимо писать цифры. Но нельзя начинать с цифры.'
let quotes = "двойные кавычки и " + 'одинарные кавычки - это одно и тоже'

//Если "два равно, то js приводит строку к числу". В примере ниже будет true.
//Три равно - ну тут реально обязательно два типа изначально должны быть одинакового типа. В примере ниже будет false.
let num1 = 42 //число
let num2 = "42" //String
if (num1 == num2) {
    console.log('Про числа "42". Да, 42 = 42. Несмотря на стринг, всё равно вычислилось.') 
}
else {
    console.log('Про числа "42". Нет, типы переменных разные')
    }




//========================================================================================================================



// 3 ОПЕРАЦИИ ВЫВОДА НА ЭКРАН

console.log("Глава 3. Пример работы console.log вывод содержимого переменной в стиле Стринг " + lastName);
//Это js-овый System.out.println в консоли.
console.log("Глава 3. Пример работы console.log. Вычисление прямо в консоли: ")
console.log (currentYear - birthYear + currentYear * 5 / 3)
//Если этот System.out,println видит только цифры, то он сделает вычисления. А если там будет хоть одна буква текста, то всё будет строкой.
// A знак >=, <=, >, < тоже можно. А еще вычисляет в том порядке, что и в жизни.
alert("Вот так работает алерт " + lastName);
//а это всплывающее уведомление на веб странице.

let favouriteFood = prompt('введите ваше любимое блюдо')
//Это js-овый java.util.Scanner который сработает как алерт.
console.log("Результат любимого блюда через промт " + favouriteFood)







//========================================================================================================================


// 4 УСЛОВНЫЕ ОПЕРАТОРЫ И ЦИКЛЫ

const courseStatus = 'pending' //то бишь not ready.

if (courseStatus === 'ready' || 'READY') { // символы || - или && - и.
    console.log('Результат условного оператора: Курс готов.')
} else if (courseStatus === 'pending') {
    console.log('Результат условного оператора: Курс ожидается')
} else {
    console.log('Результат условного оператора: Курс недоступен')
}

//Вариант 2 написать if else
const dollarOrEuro = false
dollarOrEuro ? console.log('Результат условного оператора альтернативного написания: Нет, это всё таки истина') : console.log('Результат условного оператора альтернативного написания:  Всё таки это ложь')


//Циклы
// Громоздкий как в Джаве.
//либо лаконичней
for (let carForNow of carsOwned) {
    console.log("Ещё раз меняем тачку на " + carsOwned)
}




//========================================================================================================================


// 5 МЕТОДЫ (ФУНКЦИИ)

//ключевое слово "function"обязательно. В скобках (параметры). Слово return что-то будет возвращать из этой функции.

function caculateAgeByYears (year) {
return 2002 - year 
} //вот написана функция. И смотри ниже, что можно вытворить.

let RandomAge = caculateAgeByYears(1945)
console.log ("Глава 5: Результат вычисления параметра метода (функции) " + RandomAge) //Вуаля, вычислится по функции.
console.log ("Глава 5: А ещё можно одну и ту же функцию вызывать много раз с разными параметрами " + caculateAgeByYears(1852))

//Функция внутри функции? Возможно!! Только в параметре одни входные данные, а в решении - другие.
function logInfoAbout (name, year) {
    const age = caculateAgeByYears(year)
}
if (age < 0) {
    console.log("Глава 5: Результат функции внутри функции: Вообще-то введён год из будущего")
}
else {
    console.log('Глава 5: Результат функции внутри функции: Человек по имени ' + name + " имеет возраст " + age)
}






//========================================================================================================================
// 6. ОБЪЕКТЫ И JSON ПАРЫ "КЛЮЧ: ЗНАЧЕНИЕ"

//Вместо Джавовского "Person person1 = new Person" в js пишут JSON

const person2 =  {
    firstName: 'Valentina',
    lastName: 'Samosiuk',
    birthYear: 1950,
    languages: ['Russian', 'Belarussian', 'English'],
    hasPartner: true,
    greet: function() {
        let greet = 'greet'
    },
    hasPets: true
}

console.log('Глава 6. Распечатка части JSON-а объекта, как например ' + person2.firstName + ' ' + person2.lastName + " либо целиком ")
console.log(person2)

//Значения в jsone тоже можно менять.
person2.birthYear = 1966

//JSON гибкий и в него в реальном времени можно добавлять ещё пары ключей:значений.





//===================================================================================


// 7. МАНИПУЛЯЦИИ СО СТРОЧКАМИ

const superName = 'Владилен'
console.log('Длина строчки ', superName.length)
console.log('Всё большими буквами ', superName.toUpperCase())
console.log('Все маленькими буквами ', superName.toLowerCase())
console.log('Ьуква в слове по индексу ', superName.charAt(2))
console.log('Индекс несуществующей буквы в строчке ', superName.indexOf('!'))
console.log('С какого индекса начинается фрраза ', superName.toLowerCase().startsWith('влад'))
console.log('Boolean на старт строчки со слова ', superName.startsWith('Влад'))
console.log('Boolean на окончание строчки со слова ', superName.endsWith('ен!'))
console.log( 'Повторялка', superName.repeat(3))
const string = '     password      '
console.log('Удалятель пробелов ', string.trim())
console.log('Удалятель пробелов слева ', string.trimLeft())
console.log('Удалятель пробелов справа ', string.trimRight())
